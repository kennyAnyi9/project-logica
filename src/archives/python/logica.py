# LOGICA 1
'''
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
 The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
'''

'''my first attempt
numbers_below_10 = [1,2,3,4,5,6,7,8,9]
sum = 0
multiples_of_3_or_5_below_10 = []
for each in numbers_below_10:
    if each % 3==0 or each % 5 == 0:
        multiples_of_3_or_5_below_10.append(each)
        sum += each

print(f'{multiples_of_3_or_5_below_10}:{sum}')
'''

#after consulting chatgpt

#variable to store the sum
sum = 0

#list to store couting numbers below 1000
counting_numbers_below_1000 = []

#list to store multiples of 3 or 5 below 1000
multiples_of_3_or_5_below_1000=[]

for each in range(1,1000):
    counting_numbers_below_1000.append(each)
    if each % 3 == 0 or each % 5 ==0:
        multiples_of_3_or_5_below_1000.append(each)
        sum += each
#all counting numbers below 1000
#print(counting_numbers_below_1000)
#multiples of 3 or 5 below 1000
#print(f'{multiples_of_3_or_5_below_1000}:{sum}')


#LOGICA 2

'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, 
the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89,
By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.
'''

#genenrate fibonacci sequence
'''
first =1
next = 2

fibonacci = [first,next]
for number in range(1,9):
    result = first + next
    fibonacci.append(result)
    first = next
    next = result
print(fibonacci)
'''
'''
# considering time and space complexity
def generate_fibonacci(n):
    if n<=0:
        return []
    elif n == 1:
        return[0]
    elif n == 1: 
        return[0,1]
    
    fibonacci = [0,1]
    first, next = [0, 1]
    
    for _ in range(2,n):
        first, next = next ,first + next
        fibonacci.append(next)
    return fibonacci 

print(generate_fibonacci(10))
'''

# actuall solution

def generate_fibonacci(n):
    if n<=1 or n>4000000:
        return[]
    first, next  = 1,2
    even_fibonacci = [2]
    fibonacci = [1,2]
    sum = 2
    for _ in range(2, n):
        first, next = next, first + next 
        if next % 2 == 0:
            sum += next
            even_fibonacci.append(next)
        fibonacci.append(next)
            
            
    return fibonacci,sum, even_fibonacci
print(generate_fibonacci(100))
        
        
    


    
       
    

   
    
    

    
    
    








        